<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 配置spring的ioc，把service对象配置进来 -->
    <bean id="acService" class="com.Engulf.service.impl.AccountServiceImpl"></bean>

    <!-- spring中基于xml的aop配置步骤
        1.把通知的Bean也交给spring来管理
        2.使用aop:config标签表明开始AOP配置
        3.使用aop:aspect标签表明配置切面
            id:给切面提供一个唯一标识
            ref:是指定通知类bean的id
        4.在aop:aspect标签内部使用对应的标签来配置通知的类型
            我们当前的示例是让printLog方法在切入点方法执行之前执行，所以是前置通知
            aop:before : 表示配置前置通知
                method属性:用于指定Logger类中哪个方法是前置通知
                pointcut属性:用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强

            切入点表达式的写法：
                关键字：execution(表达式)
                表达式：
                    访问修饰符 返回值 包名...类名.方法名(参数列表)

                标准的表达式写法
                    public void com.Engulf.service.impl.AccountServiceImpl.saveAccount()
                切入点表达式的一些写法：
                    访问修饰符可以省略：
                        void com.Engulf.service.impl.AccountServiceImpl.saveAccount()
                    返回值可以使用通配符*，表示任何返回值
                        * com.Engulf.service.impl.AccountServiceImpl.saveAccount()
                    包名可以使用通配符*，表示任意包，但是有几级包，就需要写几个*
                        * *.*.*.*.AccountServiceImpl.saveAccount()
                    包名可以使用..表示当前包及其子包
                        * *..AccountServiceImpl.saveAccount()
                    类名和方法名都可以使用*实现通配
                        * *..*.*()
                    参数列表：
                        可以直接写数据类型：
                            基本类型直接写名称             int
                            引用类型写包名.类名的方式  java.lang.String
                        可以使用*表示任意类型，但必须是有参数
                    参数列表可以使用..表示任意参数
                        * *..*.*(..)
                    全通配写法：
                        * *..*.*(..)

     -->

    <!-- 配置Logger类 -->
    <bean id="logger" class="com.Engulf.util.Logger"></bean>
    <!-- 配置AOP -->
    <aop:config>
        <!-- 配置切面 -->
        <aop:aspect id="logAdvice" ref="logger">
            <!-- 配置通知类型，并且建立通知方法和切入点方法的关联
                method：通知方法
                切入点方法(要增强的方法) com.Engulf.service.impl.AccountServiceImpl.saveAccount()
            -->
            <aop:before method="printLog" pointcut="execution(* *..*.*(*,*))"></aop:before>
        </aop:aspect>
    </aop:config>

</beans>