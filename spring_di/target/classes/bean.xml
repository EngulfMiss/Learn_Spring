<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- spring中的依赖注入
        依赖注入：
            Dependency Injection
        IOC的作用：
            削减程序间的依赖关系(耦合)
        依赖关系的管理：
            都交给spring来维护
        在当前类需要用到其他类的对象，由spring为我们提供，我们需要在配置文件中说明
        依赖关系的维护：
            就称之为依赖注入
        依赖注入：
            能注入的数据：有三类
                基本类型和String
                其他bean类型(在配置文件中或注解配置过的bean)
                复杂类型/集合类型

            注入的方式：有三种
                第一种：使用构造函数提供
                第二种：使用set方法提供
                第三种：使用注解提供

     -->

    <!-- 构造函数注入
        使用的标签：constructor-arg
        标签出现的位置：bean标签的内部
            标签中的属性：
                type:用于指定要注入的数据的数据类型,该数据类型也是构造函数中某个或某些参数的类型
                index:用于指定要注入的数据给构造函数中指定索引位置的参数赋值.索引位置从0开始
                name:用于指定给构造函数中指定名称的参数赋值
                ======================以上三个用于指定给构造函数中哪个参数赋值===========================
                value:用于提供基本类型和String类型的数据
                ref:用于指定其他bean类型的数据

            优势：
                在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功.

            弊端:
                改变了bean对象的实例化方式，使我们在创建对象时，如果用不到某些数据，也必须提供.
     -->
    <bean id="acService" class="qsj.Engulf.service.impl.AccountServiceImpl" scope="singleton">
        <constructor-arg type="java.lang.String" value="迷失之牙-纳尔" name="name"></constructor-arg>
        <constructor-arg type="java.lang.Integer" value="8" name="age"></constructor-arg>
        <constructor-arg name="birthday" ref="NowDate"></constructor-arg>
    </bean>

    <bean id="NowDate" class="java.util.Date"></bean>


    <!-- set方法注入
        涉及的标签：property
        出现的位置：bean标签的内部
        标签的属性：
            name:用于指定注入时所调用的set方法名称
            value:用于提供基本类型和String类型的数据
            ref:用于指定其他bean类型的数据
        优势：
            创建对象时没有明确的限制，可以直接使用默认构造函数
        弊端：
            如果某个成员必须有值，则获取对象时有可能set方法没有执行

     -->
    <bean id="acService2" class="qsj.Engulf.service.impl.AccountServiceImpl2">
        <property name="name" value="Kindred"></property>
        <property name="age" value="1500"></property>
        <property name="birthday" ref="NowDate"></property>
    </bean>



    <!-- 复杂集合的注入/集合类型的注入 -->
    <bean id="acService3" class="qsj.Engulf.service.impl.AccountServiceImpl3">
        <property name="myStrs">
            <array>
                <value>Gnar</value>
                <value>Kindred</value>
                <value>Neeko</value>
            </array>
        </property>

        <property name="myList">
            <list>
                <value>Gnar</value>
                <value>Kindred</value>
                <value>Neeko</value>
            </list>
        </property>

        <property name="mySet">
            <set>
                <value>Gnar</value>
                <value>Kindred</value>
                <value>Neeko</value>
            </set>
        </property>

        <property name="myMap">
            <map>
                <entry key="name" value="Gnar"></entry>
                <entry key="age" value="8"></entry>
            </map>
        </property>

        <property name="myProps">
            <props>
                <prop key="Name">Kindred</prop>
                <prop key="Age">1500</prop>
            </props>
        </property>
    </bean>
</beans>